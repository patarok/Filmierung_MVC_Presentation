@{
    Layout = null;
    }

@{
    ViewBag.Title = "Präsentation";
}

@*<!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Presentation</title>
    </head>
    <body>
        <div>
        </div>
    </body>
    </html>*@
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />

        <title>MVC - ein Architektur- und Entwurfsmuster</title>

        <meta
            name="description"
            content="A pattern for User-Applications"
        />
        <meta name="author" content="Peter Patoschka" />

        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta
            name="apple-mobile-web-app-status-bar-style"
            content="black-translucent"
        />

        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" href="~/css/reset.css" />
    <link rel="stylesheet" href="~/css/reveal.css" />
    <link rel="stylesheet" href="~/css/theme/league.css" id="theme" />

        <!-- Theme used for syntax highlighting of code -->
        <link rel="stylesheet" href="lib/css/monokai.css" /> <!--TODO: shouldnt we also use Tilde here?-->

        <!-- Printing and PDF exports -->
        <script>
            var link = document.createElement("link");
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = window.location.search.match(/print-pdf/gi)
                ? 'css/print/pdf.css'
                : 'css/print/paper.css';
            document.getElementsByTagName("head")[0].appendChild(link);
        </script><!--TODO: shouldnt we also use Tilde here?-->

        <!--[if lt IE 9]>
            <script src="lib/js/html5shiv.js"></script>
        <![endif]-->
    </head>

    <body>
        <div class="reveal">
            <!-- Any section element inside of this container is displayed as a slide -->
            <div class="slides">
                <!--first-->
                <section>
                    <h1>MVC</h1>
                    <h3 style="background-color:#FF00FF">Das MVC Software Design Pattern</h3>
                    <p>
                        <small>Ein Vortrag von                             <a href="http://pentaray.ga">Peter Patoschka</a> fuer die Fachkraftspruefung zur Ausbildung 'Application/Coding' am BBRZ</small>
                    </p>
                    <aside class="notes">
                        
                    </aside>
                </section>



                <!--third-->
                <section>
                    <h3>
                        <span class="fragment">
                            Only MVC is MVC -
                            <span class="fragment highlight-green">richtig</span>
                        </span>
                    </h3>
                    <aside class="notes">
                        Ich halte fest: MVC ist keine Microsoft-Erfindung und steht nicht stellvertretend fuer ASP.NET MVC.
                        MVC IST EIN GRUNDLEGENDES KONZEPT
                    </aside>
                </section>

                <!--fourth-->
                <section>
                    <h3>
                        -Konzept <br> -Architekturmuster <br>bestimmt grundlegende: <br>
                        +Organisation<br> +Interaktion
                    </h3>
                    <aside class="notes">
                        Bzw. Architekturmuster.
                        Es bestimmt grundlegende Organisation und Interaktion zwischen Programmteilen,
                        findet in vielen Bereichen Anwendung und dient auch als Vorlage fuer andere Muster.
                    </aside>
                </section>

                <section>
                    <h2>Ursprung</h2>
                    <p>
                        SIMULA || SMALLTALK 70'<br><span class="fragment highlight-green">MVC</span> ⇹ <span class="fragment highlight-red">MONOLITHISCH</span>
                    </p>
                    <h4><br>Monolitische Anfaenge:</h4>
                    <p>
                        - HomeComputer-Aera Programme <br />
                        -> auf "C64, Atari 800XL, Amiga" bspw. in BASIC
                    </p>
                    <aside class="notes">
                        Es entstammt sicher den Anfaengen der objektorientierten Programmierung
                        und steht im Gegensatz zum monolithischen Design der
                        damals ueblichen BASIC-Programmierung auf Heimcomputern wie C64 etc.
                    </aside>
                </section>

                <section>
                    <h2>Das Muster:</h2>
                    <h4>MODEL<br />&ensp;VIEW<br />&emsp;&emsp;&emsp;&ensp;CONTROLLER</h4>
                    <p>
                        -> Wiederverwendbarkeit <br />
                        -> Scalable <br>
                        &emsp;&emsp;&emsp;&emsp;&emsp;-> AutoSync
                    </p>
                    <aside class="notes">
                        Durch das Muster: Model-View-Controller ergeben sich Wiederverwendbarkeit und Skalierbarkeit <br />
                        ...und folgt man der exakten Definition natuerlich auch AutoSync.
                    </aside>
                </section>
                <!--nested vertical slides -->



                <section>
                    <h2>ENTSTEHUNGSGESCHICHTE</h2>
                    <p>
                        <span class="fragment">"XEROX PARC"-Konzept <br>-'DynaBook'- </span>
                        <br />
                        <span class="fragment">Produktanforderung: </span>
                        <br />
                        <span class="fragment">'user-oriented organisation of requirements'</span> <br>
                        <span class="fragment">
                            erste
                            Einteilung: 'Actions, Models, DynaBook-System'
                        </span> <br><span class="fragment">
                            <u>
                                erste
                                dezidierte Arbeit zu MVC:
                            </u>
                        </span><br><span class="fragment">
                            "A Cookbook for Using the
                            Model-View-Controller User Interface Paradigm in
                            Smalltalk -80"<br><small>'87~'88</small>
                        </span>
                    </p>
                    <aside class="notes">
                        Die Ausformulierung von MVC kam laut meinen Recherche-Quellen* bei der Entwicklung bzw. Arbeit an der Vision des DynaBooks von 'Xerox PARC' zustande.
                        <br />Wobei eben an einem portablen Computer gearbeitet wurde, bei welchem dem Nutzer nach dem Motto<br />
                        "user-oriented organisation of requirements", <br />alle Moeglichkeiten zur eigenstaendigen Gestaltung seiner Arbeitsumgebung angeboten werden sollten, <br /> dazu musste eine
                        Struktur gefunden werden.<br />
                        Angefangen hat man schliesslich mit "Actions und Models" <br /><br /> und was wir heute als <br />Controller verstehen,<br />
                        <br />wurde damals mit DynaBook-System bezeichnet.
                        <br /><br />

                        Eine erste AUSDRUECKLICH dem MVC Modell gewidmete Arbeit erschien aber erst 87 od. 88
                        und hiess <br /> „A Cookbook for Using the M-V-C User Interface Paradigm in SmallTalk-80“ <br />

                    </aside>
                </section>

                <section data-background-iframe="http://folk.uio.no/trygver/1979/sysreq/SysReq.pdf"
                         data-background-interactive>
                    <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                        <h2>BACK-IN-TIME</h2>
                        <p>
                            Benutzerspezifische Gestaltungsmoeglichkeiten standen im Vordergrund.
                        </p>
                    </div>
                    <aside class="notes">
                        In diesem Original-Dokument eines Entwicklers von Xerox PARC sehen wir:<br /><br /><br />
                        Dem naiven User soll es so leicht wie moeglich gemacht werden, sein System selbst mitzugestalten.<br />
                        <br />  Die Vorteile sind wie schon erwaehnt leicht ersichtlich:
                    </aside>
                </section>

                <section>
                    <section>
                        <h2><u>Zwischenschluss</u></h2>
                        <p class="fragment">
                            MVC BIETET MODULARITAET DURCH AUFTEILUNG IN
                            VERANTWORTUNGSBEREICHE.
                        </p>
                        <p class="fragment">MVC IST <b>ARCHITEKTUR</b>-MUSTER</p>
                        <p class="fragment">
                            WAS KOMPLEX KLINGEN KANN, VEREINFACHT
                            ANWENDUNGSENTWICKLUNG.
                        </p>
                        <h3 class="fragment">MVC => RAD</h3>
                        <p>▽▽▽</p>
                        <aside class="notes">
                            Durch die Aufteilung in die definierten Verantwortungsbereiche,<br />
                            ergiebt sich eine bessere Uebersicht auf die Programmteile und ihre Zustaendigkeiten.<br />
                            Somit ergibt sich weiters eine bessere Wiederverwendbarkeit, der einzelnen Programmteile.
                            <br />
                            Wir fassen zusammen: <br />
                            =>MVC ist keine fanatische Religion sondern ein Architekturmuster dem man in einem Projekt folgen,<br />
                            es aber auch veraendern und andere Konzepte hinzufuegen kann.

                            Es mag,<br />laut Definition,
                            <br />etwas komplex klingen…<br /><br />
                            vereinfacht aber in Wirklichkeit die Anwendungsentwicklung,<br />
                            da sich damit wiederverwendbare Boilerplates nach dem Muster vorbereiten lassen,<br />
                            mit denen man gut R(apid)A(pplication)D(evelopment)-Projekte umsetzen kann.
                            Schauen wir uns ein Video zur definierten Kommunikation des MVC-Musters an:
                        </aside>
                    </section>


                </section>


                @*changed: &ytp-pause-overlay=0*@
                <section data-background-iframe="https://www.youtube.com/embed/qLTbfUte1Tc" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen
                         data-background-interactive>

                    <aside class="notes">
                        <br /> XXX CLICK pLAY iN MAIn-winDOw!! xxxXXX
                        <br />
                        .. Sie sehen, <br />
                        der User interagiert mit der View <br />
                        die View teilt dem Controller mit: <br />
                        veraendere Dies und Das <br />
                        Der Controller teilt dem Model mit nach welcher Logik er seine Daten veraendern soll. <br />
                        Das Model wendet entsprechende Business-Logic auf seine Daten an. <br />
                        hier =auf logischer Ebene= wo das Modell dem View mitteilt, <br />dass es sich veraendert hat <br />
                        <br />passiert das, <br />in ASP.net MVC <br /> mittels Rueckgabe an die gerufene Controllermethode,
                        welche dann die View entsprechend veraendert und zurueckgibt.
                    </aside>
                </section>

                <section>
                    <h2>.WIEDERHOLUNG.</h2>
                    <p>
                        <span class="fragment">ist Strukturvorgabe<br>um</span> <br>
                        <span class="fragment">Programmbereiche<br>in</span>
                        <br>
                        <span class="fragment highlight-red">M</span>
                        <span class="fragment highlight-green">V</span>
                        <span class="fragment highlight-blue">C</span><br>
                        <span class="fragment">SO GUT WIE MOEGLICH <br>und</span><br>
                        <span class="fragment">
                            EINDEUTIG<br>
                            voneinander zu trennen.
                        </span>
                    </p>
                    <aside class="notes">
                        Lassen sie uns erneut ein Resumee ziehen:<br />
                        Man sieht dass MVC eine Strukturvorgabe ist, <br />die es sich zur Aufgabe gemacht hat,<br />
                        einzelne Programmteile mit defierten Aufgabenbereichen, so gut wie moeglich,<br /> EINDEUTIG, <br />voneinander separat zu halten.<br /><br />
                        was wie Anfangs schon bemerkt mehrere Vorteile mit sich bringt.<br />
                    </aside>
                </section>

                <!--SELFCALL to -> Filmierung.APP-->
                <section data-background-iframe="http://localhost:58144/Home"
                         data-background-interactive>
                    <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                        <h2>ASP.net MVC </h2>
                        <p>
                            Take a byte!
                        </p>
                    </div>
                    <aside class="notes">
                        Sie haben ja gesehen, <br />
                        die Praesentation wurde aus einer MVC-App<br />
                        heraus gestartet. <br />
                        Lassen sie uns darin gleich den Code der Applikation selbst ansehen.<br />
                        <br />
                        xxx FAQ - Seite innerhalb Applikation oeffnen <br />-->Info--  xxxXXX
                        <br />
                        <br />
                        Es handelt sich hier nur um eine kleine App, aber man sieht hier mal wie so ein Modell aussieht:
                        Hier sind alle Teile des Modells definiert, <br />die wir in unserer App darstellen wollen. <br />
                        Und man findet die zugehoerige Business-Logic darin. <br />
                        Sieht man sich die Folder-Struktur an, <br />
                        Kann man gut den Aufbau bzw. das Geruest MODEL VIEW CONTROLLER sehen.
                        Jede View hat <br />einen Controller welcher wiederum seinerseits, <br />mit einem Model kommunizieren kann. <br />
                         ENDE
                    </aside>
                </section>


                <section>
                    <h2>ASP.NET MVC</h2>
                    <section>
                        <p>&emsp;</p>
                        <img src="../../Content/Images/MVC_DiagramSelf.png" alt="Diagramm zu ASP.NET" style="border:none;" />

                        <aside class="notes">
                            Sehen wir uns das nochmal in einem Diagramm an:
                            Der User stellt eine Anfrage ueber die View, <br />
                            die View macht eine Anfrage an den Controller, <br />
                            welcher dann die angeforderten Updates <br />an das Model weiterleitet, <br />
                            welches seinerseits wiederum dem Controller mitteilt, dass es das Update <br />fertig ausgefuehrt hat,<br />
                            bzw. zum Controller "RETURNED" also retourniert.<br />
                            Der Controller gibt dann schliesslich die durchgefuehrten Updates<br />an die View weiter.<br />
                            Welche sie, <br />fuer den Benutzer aufbereitet anzeigt.
                        </aside>
                    </section>
                </section>


                <!--pause bildschirm--> <!--Erklaerung zur Dehnbarkeit des Begriffs-->
                @*Reveal.addEventListener( 'customevent', function() {
        Reveal.configure({ controls: true });
        } );*@

                <section style="color:orange;" data-background="https://thumbs.gfycat.com/WanPointedEarwig-max-1mb.gif">
                    <h2 style="color:orange;">WEITERE MUSTER:</h2>
                   
                    <section>
                        <!--PAC-->
                        <h2 style="color:red;">PAC</h2>
                        <h3 style="color:orangered;" class="fragment">Presentation-Abstraction-Control</h3>
                        <p>
                            <span style="color:orangered;">
                                <span class="fragment highlight-blue">Anforderungen </span><span class="fragment">-></span>
                                <span class="fragment highlight-blue">Agenten</span><br><span class="fragment">- Jeder Agent:</span><br>
                            </span><span class="fragment highlight-green">P</span><span class="fragment">resenter, </span><span class="fragment highlight-red">A</span><span class="fragment">bstraction, </span><span class="fragment highlight-green">C</span><span class="fragment">ontrol</span>
                        </p>
                        <aside class="notes">
                            Beschreibt man das MVC Modell kommt man nicht umhin, <br />
                            noch andere Muster, <br />
                            bzw. Ableger des MVC-Architekturmusters zu erwaehnen.
                            Ich beschraenke mich auf 2 davon.
                            Eines heisst:
                            ist PresentationAbstractionControl<br />
                            kurz:<br /> PAC<br />
                            Bei Presentation-Abstraction-Control,  xxxCLICKxxx<br /> werden Anforderungen <br />  xxxCLICKxxx auf Agenten verterteilt.<br />
                            xxxCLICKxxx<br />
                            Welche sich dann wieder in <br /> xxxCLICKxxx Presenter, <br />
                            xxxCLICKxxx Abstraction <br />
                            und   xxxCLICKxxx  Control <br />unterteilen.
                        </aside>
                    </section>

                    <section>
                        <!--MVVM-->
                        <h2 style="color:orangered;">MVVM</h2>
                        <h3 style="color:red;"><span class="fragment">Model-View-ViewModel</span></h3>
                        <p class="fragment" style="color:orange;">und nicht</p>
                        <h3><span class="fragment"><span class="fragment highlight-blue">Model-View-View-Model</span></span></h3>
                        <p>
                            <span class="fragment">Vorteil:</span>
                            <span class="fragment">Rollentrennung -> </span><br>
                            <span class="fragment">UX/UI-Designer</span>
                            <span class="fragment">|</span>
                            <span class="fragment">UI/Logic-Programmer</span>
                        </p>
                        <aside class="notes">
                            und zum Schluss: <br /> Model . View . ViewModel <br />
                            MVVM ist dahingehend interessant, dass es eine Rollentrennung in UI-Designer und Entwickler erlaubt, <br />
                            wodurch die Anwendungsschichten LOGIC und UI/UX von verschiedenen Arbeitsgruppen entwickelt werden können.<br />
                            xxx 5 CLICKSxxx <br />
                            Der Vorteil dabei ist: <br />
                            Designer können ihren Fokus auf User Experience legen und Entwickler die UI- bzw. GeschäftsLOGIK schreiben.
                        </aside>
                    </section>

                </section>

                <!--section other frameworks than ASP.NET MVC-->
                <section>
                    <section data-background="https://media.giphy.com/media/a29uUCryHZkPe/giphy.gif">
                        <h2 style="color:indianred;">andere MVC FRAMEWORKS:</h2>
                        <aside class="notes">
                            Abschliessend mag ich ihnen noch ein paar <br />
                            nicht Microsoft-MVC-Frameworks <br />
                            vorstellen.
                        </aside>
                    </section>

                    <section data-background-iframe="https://www.larashout.com/what-is-laravel-and-why-you-should-learn-it"
                             data-background-interactive>
                        <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                            <h2>Laravel</h2>
                            <p>
                                -modulares Packaging System <br />
                                -Dependency Manager <br />
                                -Utilities <br />
                                -Syntactic Sugar
                            </p>
                            <aside class="notes">
                                Bietet:
                                Ein modulares Packaging-System mit einem dezidiertem Dependency-Manager,
                                sowie unterschiedliche Moeglichkeiten, relationale Datenbanken und Utilities fuer Deployment und Wartung anzusprechen.
                                Weiters legt das Framework auch Wert auf "Syntactic Sugar".
                                Was Bedeutet, dass eine besondere Syntax angeboten wird die vieles vereinfachen soll.
                            </aside>
                        </div>
                    </section>
                    <section data-background-iframe="https://rubyonrails.org/"
                             data-background-interactive>
                        <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                            <h2>Ruby-On-Rails</h2>
                            <p>
                                -Programmiersprache: Ruby <br />
                                -DRY-Prinzip
                                -Convention before Configuration
                            </p>
                            <aside class="notes">
                                Ruby on Rails, kurz Rails, früher auch oft kurz RoR, ist ein ursprünglich von David Heinemeier Hansson,
                                in der Programmiersprache Ruby geschriebenes und quelloffenes Webframework.<br />
                                Rails ist geprägt von den Prinzipien „don’t repeat yourself“ (DRY) und <br /> „Konvention vor Konfiguration“:
                                Das heißt, statt einer variablen Konfiguration sind Konventionen für die Namensgebung von Objekten einzuhalten,
                                aus denen sich deren Zusammenspiel automatisch ergibt.
                                Diese Funktionen ermöglichen eine rasche Umsetzung von Anforderungen.
                            </aside>
                        </div>
                    </section>
                    <section data-background-iframe="https://sailsjs.com"
                             data-background-interactive>
                        <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                            <h2>Sails.JS</h2>
                            <p>
                                -entwickelt mit Node.js
                                -MIT-Lizenz
                                -Ergaenzung zu node.js
                            </p>
                            <aside class="notes">
                                Sails.js ist ein MVC-WebApp Framework welches mit dem Node.JS Environment entwickelt wurde,
                                und ist unter der MIT-Lizenz als freie Software verfuegbar.<br />
                                Es wurde mit dem Ziel geschrieben, die Entwicklung von kommerziellen Node.JS WebApps und APIs zu vereinfachen.
                            </aside>
                        </div>
                    </section>

                    <section data-background="https://cdn.iwastesomuchtime.com/822012231911whenmygirlfriendsaysweneedtotalk.gif"><h2 style="color:red;">... bevor wir den Rahmen sprengen,<br>rekapitulieren wir ein letztes Mal...</h2></section>
                    <h2 style="color:dimgray">ABSCHLIESSEND NOCH:</h2>
                </section>

                <section>
                    <section>
                        <h2>
                            BESTAND<span class="fragment">T</span><span class="fragment">E</span><span class="fragment">I</span><span class="fragment">L</span><span class="fragment">E</span>
                        </h2>
                        <p>Aufteilung in:</p>
                        <br />
                        <a href="#" class="navigate-down">
                            <img style="border:none; background-color:none;"
                                 width="178"
                                 height="238"
                                 data-src="../../Content/Images/mvcPres_arrow.png"
                                 alt="Down arrow" />
                        </a>
                        <aside class="notes">
                            Die Bestand- xxx!5CLICKsxxx -teile <br /><br /><br />
                            von MVC sind genau so definiert,<br />
                            wie zuvor erwaehnt,<br />
                            aber fassen wir nochmal kurz zusammen:
                        </aside>
                    </section>
                    <section>
                        <h2>MODEL:</h2>
                        <p>
                            <span class="fragment"><u>ist:</u> </span><br>
                            <span class="fragment">-WISSEN </span>
                            <br /> <span class="fragment">-STRUKTURIERTE DATEN </span>
                            <br /><span class="fragment">&ensp;*Objekt</span>
                            <br /><span class="fragment">&ensp;*Struktur aus mehreren Objekten</span>


                        </p>
                        <p>
                            <span class="fragment"><u>bietet: </u></span><br /><span class="fragment">Business Logic(Modell-Logik/Methoden)</span> <br /><span class="fragment">Information/Kommunikation: </span><span class="fragment">MODEL->VIEW</span>
                            <br />
                        </p>
                        <aside class="notes">xxxx laut FOLIE xxxx <br />
                        - ..ist <br />
                        * ..stellt sich dar als<br />
                        ! bietet weiters: <br />
                         ...bzw Methoden das Geschaeftsobjekt betreffend.<br />
                        </aside>
                    </section>
                    <section>
                        <h2>VIEW</h2>
                        <p>
                            <span class="fragment"><u>macht:</u> </span><br>
                            <span class="fragment">-RAEPRESENTATION </span><br><span class="fragment">-STRUKTURIERTE ANSICHT der DATEN</span>
                            <br /><small>
                                <span class="fragment">&ensp;*...hebt hervor</span>
                                <br /><span class="fragment">&ensp;*...blendet aus</span>
                                <br /><span class="fragment">&emsp;&emsp;&emsp;&emsp;*...sendet Nachrichten</span>
                            </small>
                        </p>
                        <p>
                            <span class="fragment"><u>ist:</u> </span><br /><span class="fragment">
                                AnsichtsFilter<br />
                                UserInterface
                            </span>

                        </p>
                        <aside class="notes">xxxx laut FOLIE xxxx</aside>
                    </section>
                    <section>
                        <h2>CONTROLLER</h2>
                        <p>
                            <span class="fragment"><u>bedeutet:</u> </span><br />
                            <span class="fragment">-VERBINDUNG </span><br />
                            <span class="fragment">-INFORMATIONSAUFBEREITUNG</span>
                            <br>
                            <span class="fragment">
                                &ensp;*Schnittstelle<br />
                                &ensp;*Uebersetzer/Umwandler <br>
                            </span>
                            <span class="fragment"><small>(im Datenstrom/Datenaustausch)</small></span>
                        </p>
                        <p>
                            <span class="fragment">&ensp;<u>bietet also:</u></span> <br />
                            <span class="fragment">CRUD-Logic</span><br /><span class="fragment">Input-Handling</span><br /><span class="fragment">Application-Logic</span>
                            <br />
                        </p>
                        <aside class="notes">xxxx laut FOLIE xxxx <br />
                        - .. bedeutet <br />
                        * .. ist bzw. kann verstanden werden als:<br />
                         ...lso... Inp... Sowie die eigentliche Applic...<br />
                        </aside>
                    </section>
                </section>

                <section>
                    <h2 class="fragment">AMBIVALENZ<br>in <span style="color:red;">MVC</span></h2>
                    <p><span class="fragment">- Gesamtkonzept</span>
                    <p><span class="fragment">- Teilsystem</span>
                    <p><span class="fragment">- Grundidee</span>
                    <p>
                        <span class="fragment">- ebenfalls eher Strukturvorgaben</span>
                        <br><span class="fragment">- schwierig von MVP zu unterscheiden</span>
                        <br><span class="fragment">-> RAD</span>
                    </p>
                    <aside class="notes">
                        Natuerlich ergiebt sich bei MVC-Frameworks und auf MVC basierenden Anwendungen,
                        immer eine gewisse Ambivalenz. <br />
                        Soll heissen, es wird das Muster nicht immer zu 100% exakt verfolgt. <br />
                        Und auch viele weitere Muster wie MVC sind ebenfalls eher Strukturvorgaben,
                        als Regeln die zu 100% auf "Biegen und Brechen" einzuhalten sind.
                        Nichtsdestotrotz folgen solche Muster im groben immer so gut wie moeglich ihrer Definition.
                        Sie koennen aber dennoch eine gute Stuetze fuer RAB/RAD Projekte sein, <br />
                        xxx SCROLLtoBOTTOM XXX <br />
                        wenn man sich so exakt wie moeglich,<br />
                        an die Definitionen haelt, <br />die als passend fuer das verwendete Muster festgelegt wurden.

                        Abschliessend nochmal die Meinung eines Wikipedia-Autors zur Ambivalenz des Begriffs 'MVC':
                        Die Begriffe des ursprünglichen MVC-Musters werden heute oft entlehnt, um Systeme begreiflich zu machen, die weitaus komplexer sind als die damalige Software. Dabei kommt es auf die Perspektive des betrachteten Teilsystems an, welche Elemente damit bezeichnet werden.
                        Somit laesst sich schliessen:
                        Die Grundidee der Trennung von Model, View und Controller hat sich erhalten, wird aber feiner granuliert und verschachtelt eingesetzt.
                    </aside>
                </section>

                <section>
                    <h3>URSPRUENGLICHE DEFINITION ?</h3>

                    @*MVC-DEFINITION*@


                <section>
                    <h1>MODEL</h1>
                    <blockquote style="font-size: 0.7em;">
                        &ldquo;Modelle repraesentieren, bzw. das Modell repraesentiert Wissen bzw. aufbereitete oder strukturierte Daten. Ein Modell kann ein einziges Objekt sein(eher uninteressant), oder es ist eine Struktur aus mehreren Objekten.
                        Es sollte einerseits eine "Eins zu Eins"-Korrespondenz zwischen dem Modell und seinen Teilen auf der einen Seite
                        und der vom Eigentuemer als Entitaet wahrgenommenen Repraesentation, also dem View auf der anderen Seite geben.
                        Es sollte auch die Business-Logic enthalten.&rdquo;
                    </blockquote>
                    <small><br>...Definition laut Xerox PARC(Palo Alto Research Center) sagt eindeutig, dass die <a href="#/19">Business-Logic</a></small> im Model sein soll
                    <aside class="notes">
                        Modelle repraesentieren, <br />bzw. das Modell repraesentiert<br /> Wissen bzw. aufbereitete oder strukturierte Daten.<br /> Ein Modell kann ein einziges Objekt sein<br />(eher uninteressant),
                        <br /> oder es ist eine Struktur aus mehreren Objekten.
                        <br />Es sollte einerseits eine "Eins zu Eins"-Korrespondenz zwischen dem Modell und seinen Teilen auf der einen Seite<br /><br />
                        und der vom Eigentuemer als Entitaet wahrgenommenen Repraesentation auf der anderen Seite geben.<br /><br />
                        Es sollte also auch die Business-Logic enthalten, <br /> auch wenn einige Menschen dazu tendieren diesen Fakt zu leugnen <br />und selbige mittels Dependency-Injection**<br /> zu implementieren.
                        lassen sie uns kurz ansehen was Erfinder der Objektorientierten Programmierung zu Modellen ohne Logik sagen: XLINKX.
                        Ich fasse zusammen, wir haben im Modell zugriff auf:<br />
                        -die Daten bzw. das Datenmodell<br />
                        -Business Logic<br />
                        =>Logik zur Modell-Zustandsveraenderung <br />
                        und zur Mitteilung des Zustands der Daten<br />
                        &emsp;&emsp;(bzw. ihrer Veraenderung) an alle  eingeschriebenen Teilnehmer <br />bzw. den Controller<br /><br />
                        **(externe Libraries)
                        >>>>!!!!!!!!!!!LINK!!!!!!!!!!!!!!!
                    </aside>
                </section>

                    <section>
                        <h1>VIEW</h1>
                        <blockquote style="font-size: 0.6em;">
                            &ldquo;Eine View(Ansicht) ist (oder soll...) eine visuelle Repraesentation, des Modells (...enthalten.)
                            Die Ansicht wuerde normalerweise bestimmte Eigenschaften des Models anzeigen/uebermitteln bzw. hervorheben und andere ausblenden. Sie agiert sozusagen auch als Ansichtsfilter fuer die
                            im Programm dahinterliegenden Daten.
                            Eine View ist immer an ihr Modell (oder einen Modell-Teil) angehangen und bekommt die notwendigen Daten fuer die Praesentation vom Modell indem Sie Fragen stellt.
                            Sie darf auch das Modell updaten, indem sie diverse Nachrichten sendet, diese Fragen und Nachrichten muessen sich in der Terminologie des Modells bewegen, wonach auch die View ueber semantische Informationen der Attribute, des Modells das sie darstellen soll, verfuegen muss.&rdquo;
                        </blockquote>
                        <aside class="notes">
                            View:

                            Eine View(Ansicht) ist (oder soll...) eine visuelle Repraesentation, des Modells (...enthalten.)<br />
                            Die Ansicht wuerde normalerweise <br />bestimmte Eigenschaften des Models<br /> anzeigen/uebermitteln bzw. hervorheben <br />
                            und andere ausblenden. <br />Sie agiert sozusagen auch als Ansichtsfilter<br /> fuer die
                            im Programm <br />dahinterliegenden Daten.
                            Eine View ist immer an ihr Modell<br /> (oder einen Modell-Teil) angehangen <br /> und bekommt die notwendigen Daten fuer die Praesentation <br />
                            vom Modell, = indem Sie Fragen stellt.<br />
                            Sie darf auch das Modell updaten, <br />indem sie diverse Nachrichten sendet, <br />diese Fragen und Nachrichten,<br /> muessen sich in der Terminologie des Modells bewegen, <br />wonach auch die View <br />ueber semantische Informationen <br />der Attribute, <br />des Modells welches sie darstellen soll, <br />verfuegen muss.<br />
                            Der Teil View <br />sollte also beinhalten -><br />
                            - UI(UserInterface)<br />
                            - eventuell DOM-Adapter<br />
                            laut Definition observiert die View das Modell<br /> und laedt sich neu, <br /> sollte sich das Modell aendern.
                        </aside>
                    </section>

                    <section>
                        <h1>Controller</h1>
                        <blockquote style="font-size: 0.7em;">
                            &ldquo;Der Controller ist die Verbindung zwischen dem User und dem System. Er bereitet dem Nutzer die Informationen auf, so dass sie in der View angezeigt werden koenen.
                            Er stellt die Schnittstellen fuer "User-Output"(Eingaben seinerseits) bereit, empfaengt diese also und uebersetzt sie mittels Programmlogik wieder fuer eine oder mehrere der Views.&rdquo;
                        </blockquote>
                        <aside class="notes">
                            Controller:
                            Der Controller ist die Verbindung zwischen dem User und dem System. <br /> Er bereitet dem Nutzer die Informationen auf, <br />so dass sie in der View angezeigt werden koenen.
                            <br />Er stellt die Schnittstellen fuer "User-Output"(Eingaben seitens des Users) bereit, <br />
                            empfaengt diese also <br />und uebersetzt sie mittels Programmlogik<br /> wieder fuer eine oder mehrere der Views.
                            Der Controller ist bzw. beinhaltet: <br />
                            - Input-Handler <br />
                            - Application-Logic <br />
                            - CRUD-Logic (Create-Update-Delete) <br /><br />
                            --><br />
                            Wir sehen jetzt die Kommunikation wie urspruenglich in den Dokumenten von Xerox PARC definiert <br />
                            ///goto next Page
                        </aside>
                    </section>

                </section>


                <section>
                    <h2><span class="fragment">DANKE!</span></h2>
                    <p><span class="fragment">fuer Ihre Zeit</span></p>
                    <p><span class="fragment">und Danke <br>an</span></p>
                    <p><span class="fragment">Trygve M. H. Reenskaug, Edsger_W._Dijkstra, Alan Kay, Dan Ingalls, Adele Goldberg, Martin Fowler, Dean Kerr, Wikipedia, Google Inc. und DuckDuckGo</span></p>

                </section>

                <section>
                    <h1>THE END</h1>
                    <p>
                        <a href="https://pentaray.ga">- Try my nerdy website -</a><br>
                        <a href="https://github.com/hakimel/reveal.js">- Hakimel's 'reveal.js' is on GITHUB -</a>
                    </p>
                    <h4>sources:</h4>
                    <small>
                        <a href="https://blog.codinghorror.com/understanding-model-view-controller/">CodingHorror.com</a><br />
                        <a href="https://microsoftmentalist.wordpress.com/2011/06/24/mvc-design-pattern-introduction/">MicrosoftMentalist</a><br />
                        <a href="https://www.c-sharpcorner.com/UploadFile/56fb14/understanding-separation-of-concern-and-Asp-Net-mvc/">C-SharpCorner.com</a><br />
                        <a href="http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html">Universitet i Oslo</a><br />
                        <a href="http://de.wikipedia.org">Wikipedia-DE</a> ..
                        <a href="http://en.wikipedia.org">Wikipedia-EN</a><br />
                        <a href="https://blog.scottlogic.com/">ScottLogic</a><br />
                        <a href="http://youtube.com">diverse Youtube Tutorials</a>
                    </small>
                </section>

                <section data-background-iframe="https://en.wikipedia.org/wiki/Anemic_domain_model"
                         data-background-interactive>
                    <div style="position: absolute; width: 40%; right: 0; box-shadow: 0 1px 4px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.2); background-color: rgba(0, 0, 0, 0.9); color: #fff; padding: 20px; font-size: 20px; text-align: left;">
                        <h2>BEHIND the CURTAIN</h2>
                        <p>
                            &ldquo;NO business logic in your <a href="#/14">model</a> is what we should call 'anemic' ...&rdquo;
                        </p>
                    </div>
                    <aside class="notes">
                        Hier in diesem Wikipedia-Artikel bspw. <br />
                        spricht ein renommierter Fachmann davon, <br />
                        dass er generell gerne, <br />
                        alle Arbeiten bei denen im Modell, <br />
                        keine Business Logic implementiert ist. <br />
                        Dem Pattern "AnemicDomainModel" <br />zuordnen moechte...
                    </aside>
                </section>

                <section>
                    <h1>!<a href="#/16/1">BUSINESS OBJECTS</a>!</h1>
                    <h1>=></h1>
                    <h1>BUSINESS LOGIC</h1>
                    <aside class="notes">
                        zum Begriff Business Logic, <br />
                        muss man auch noch sagen: <br />
                        Dass dieser mittlerweile zum gefluegelten Wort geworden ist <br />
                        und man damit oft "Business Logic" und "Business Rules" <br />
                        gemeinsam erwaehnt bzw. meint. <br />
                        Auch wenn das von der Semantik her <br />
                        2 verschiedene Dinge sind. <br /><br />
                        Und Business Rules eigentlich den Aufbau <br />
                        von Geschaeftsobjekten aus dem echten Leben definieren...<br />
                        (Kredit, Inventar, Leihe, Konto) <br />
                        Waehrend die Business Logic beschreibt, <br />
                        wie die Objekte miteinander agieren sollen <br />
                        oder vorschreibt, mit welchen Methoden <br />
                        oder auf welchen Wegen die Geschaeftsobjekte veraendert bzw. <br />
                        auf diese zugegriffen werden darf.



                    </aside>
                </section>

                <section>
                    <p class="notesbatch"></p>
                </section>

                
            </div>
        </div>

        <script src="~/js/reveal.js"></script>

        <script>
            // More info https://github.com/hakimel/reveal.js#configuration
            Reveal.initialize({
                controls: true,
                progress: true,
                center: true,
                hash: true,
                transition: "zoom", // none/fade/slide/convex/concave/zoom

                // More info https://github.com/hakimel/reveal.js#dependencies
                dependencies: [
                    {
                        src: '~/plugin/markdown/marked.js',
                        condition: function() {
                            return !!document.querySelector("[data-markdown]");
                        }
                    },
                    {
                        src: '~/plugin/markdown/markdown.js',
                        condition: function() {
                            return !!document.querySelector("[data-markdown]");
                        }
                    },
                    { src: '../../plugin/highlight/highlight.js' },
                    { src: '../../plugin/search/search.js', async: true },
                    { src: '../../plugin/zoom-js/zoom.js', async: true },
                    { src: '../../plugin/notes/notes.js', async: true }
                ]
            });

        
        </script>
    </body>
</html>
<!--### Slide States

If you set `data-state="somestate"` on a slide `<section>`, "somestate" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.

Furthermore you can also listen to these changes in state via JavaScript:

```javascript
Reveal.addEventListener( 'somestate', function() {
	// TODO: Sprinkle magic
}, false );-->